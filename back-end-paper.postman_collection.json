{
	"info": {
		"_postman_id": "27afc011-ab56-414b-8aca-237ece48cbf3",
		"name": "back-end-paper",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Auth",
			"item": [
				{
					"name": "Register",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\",\n    \"registrationCode\": \"\" \n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/register",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"register"
							]
						},
						"description": "# Register\n## Request\nMETHOD: POST\n### Body\n- username: string (REQUIRED)\n- password: string (REQUIRED)\n- registrationCode: string (REQUIRED)\n\n**username**\n> The name of the user to register\n\n**password**\n> The raw password of the user that wants to register\n\n**registrationCode**\n> A string that has been generated by an admin, necessary to register to the app.\n\n## Responses\n### 201 (CREATED)\nUser has been created\n### 403 (FORBIDDEN)\nRegistration Code invalid\n### 409 (CONFLICT)\nUsername is already registered\n### 500 (SERVER_ERROR)\nAny other kind of server-side error"
					},
					"response": []
				},
				{
					"name": "Login",
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"username\": \"\",\n    \"password\": \"\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/auth/login",
							"host": [
								"{{URL}}"
							],
							"path": [
								"auth",
								"login"
							]
						},
						"description": "# Login\n## Request\nMETHOD: POST\n### Body\n- username: string (REQUIRED)\n- password: string (REQUIRED)\n\n**username**\n> The name of the user to login\n\n**password**\n> The raw password of the user that wants to login\n\n## Responses\n### Codes\n#### 200 (OK)\nUser is logged in\n#### 403 (FORBIDDEN)\nPassword wrong\n#### 404 (NOT_FOUND)\nRegistration Code invalid\n#### 500 (SERVER_ERROR)\nAny other kind of server-side error\n\n### Body\n```\n{\n  \"userData\": {\n    \"username\": string,\n    \"isAdmin\": boolean,\n    \"accessToken\": string,\n    \"validityAccessToken\": number,\n    \"refreshToken\": string,\n    \"validityRefreshToken\": number\n  }\n}\n```\n* _username_: The users name\n* _isAdmin_: Indicated wether the user has admin-priviliges\n* _accessToken_: The token used to validate authenticated requests against the backend\n* _validityAccessToken_: Indicates until what time the access token is valid (ms since EPOCH)\n* _refreshToken_: The token used to request an updated accessToken from the backend, the previous accessToken will be invalidated\n* _validityRefreshToken_: Indicates until what time the access token is valid (ms since EPOCH)"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "URL",
			"value": "localhost:8080",
			"type": "default"
		}
	]
}