openapi: '3.0.2'
info:
  title: Rust Simple Authentication Server
  version: '1.0'
servers:
  - url: http://localhost:8080/
tags:
  - name: Register
  - name: User
  - name: Tokens
  - name: Password
  - name: OTP
  - name: Admin

paths:
  /auth/self:
    get:
      tags:
        - User
      description: Retrieve information about the currently logged in user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserResponse"
        400:
          description: Bad Request
        401:
          description: Not Authorized (not logged in)

  /auth/register:
    post:
      tags:
        - Register
      description: Register a new user, this requires the use of an OTP, generated by an administrator
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewUser"
      responses:
        201:
          description: Created
        409:
          description: Username is already taken

  /auth/login:
    post:
      tags:
        - User
      description: Login as an existing user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginData"
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        401:
          description: Unauthorized
        403:
          description: Forbidden
        404:
          description: Not Found

  /auth/refresh/{refreshToken}:
    get:
      tags:
        - Tokens
      description: Use a refresh token to retrieve a new set of valid tokens
      parameters:
        - name: refreshToken
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TokenPair"
        
  /auth/logout:
    get:
      tags:
        - User
      description: Log out a logged in user
      responses:
        200:
          description: OK
    
  /auth/update-password-by-password:
    post:
      tags:
        - Password
      description: Change the password of an existing user by providing the old password while being logged in
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordByPassword"
      responses:
        200:
          description: OK

  /auth/update-password-by-otp:
    post:
      tags:
        - Password
      description: Change the password of an existing user by using an One-Time-Password, generated by an admin
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordByOtp"
      responses:
        200:
          description: OK

  /otp:
    get:
      tags:
        - OTP
      description: Get a list of all existing One-Time-Passwords that have been generated
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OtpList"

  /otp/register:
    post:
      tags:
        - OTP
      description: Create a new OTP that can be used to register a new user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOtpForRegistration"
      responses:
        200:
          description: OK

  /otp/password:
    post:
      tags:
        - OTP
      description: Create a new OTP that can be used to reset a password of a given user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/NewOtpForPasswordReset"
      responses:
        200:
          description: OK

  /otp/{id}:
    delete:
      tags:
        - OTP
      description: Delete an existing OTP
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK

  /users:
    get:
      tags:
        - Admin
      description: Retrives a list of all registered users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserList"

  /users/{userId}/admin/{isAdmin}:
    get:
      tags:
        - Admin
      description: Updates the admin-flag of an existing user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
        - name: isAdmin
          in: path
          required: true
          schema:
            type: boolean
      responses:
        200:
          description: OK

  /users/{userId}/lock:
    get:
      tags:
        - Admin
      description: Disable the account of an existing user for login (Suspend)
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK

  /users/{userId}/unlock:
    get:
      tags:
        - Admin
      description: Re-Enable the account of an existing (suspended) user for login
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK

  /users/{userId}:
    delete:
      tags:
        - Admin
      description: Delete a registered user
      parameters:
        - name: userId
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        200:
          description: OK

components:
  responses:
    400:
      description: Bad Request
    401:
      description: Not Authorized (not logged in)
    403:
      description: Forbidden (insufficient privileges)
    404:
      description: No user found (no registered user)
    409:
      description: Conflict (user already exists)
    500:
      description: Internal Server Error
  schemas:
    UserResponse:
      type: object
      properties:
        user:
          $ref: "#/components/schemas/UserInfo"

    UserInfo:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        username:
          type: string
        admin:
          type: boolean
        blocked:
          type: boolean
      required:
        - userId
        - username

    NewUser:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
        registrationCode:
          type: string
      required:
        - username
        - password
        - registrationCode

    LoginData:
      type: object
      properties:
        username:
          type: string
        password:
          type: string
      required:
        - username
        - password

    TokenPair:
      type: object
      required:
        - tokens
      properties:
        tokens:
          type: object
          properties:
            user:
              type: string
              format: uuid
            accessToken:
              $ref: "#/components/schemas/Token"
            refreshToken:
              $ref: "#/components/schemas/Token"
          required:
            - user
            - accessToken
            - refreshToken

    Token:
      type: object
      properties:
        token:
          type: string
          format: uuid
        expiresAt:
          type: number
          format: i64
        duration:
          type: number
          format: i64
      required:
        - token
        - expiresAt
        - duration
    
    UpdatePasswordByPassword:
      type: object
      properties:
        oldPassword:
          type: string
        newPassword:
          type: string
      required:
        - oldPassword
        - newPassword
    
    UpdatePasswordByOtp:
      type: object
      properties:
        otpCode:
          type: string
        newPassword:
          type: string
      required:
        - otpCode
        - newPassword

    OtpList:
      type: array
      items:
        $ref: "#/components/schemas/Otp"

    Otp:
      type: object
      description: Data that describes a One-Time-Password, if codeType is PW_RESET, the user-property has to be set
      properties:
        id:
          type: number
          format: i32
        code:
          type: string
        codeType:
          type: string
          enum:
            - PW_RESET
            - REGISTER
        user:
          type: string
          format: uuid
      required:
        - id
        - code
        - codeType
  
    NewOtpForRegistration:
      type: object
      properties:
        code:
          type: string
      required:
        - code

    NewOtpForPasswordReset:
      allOf:
        - $ref: "#/components/schemas/NewOtpForRegistration"
        - type: object
          properties:
            user:
              type: string
              format: uuid
      required:
        - user
    
    UserList:
      type: array
      items:
        $ref: "#/components/schemas/UserInfo"

